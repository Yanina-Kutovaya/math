import numpy as np
import math
import matplotlib.pyplot as plt
import itertools

# Задания к уроку 4:

# 1. Напишите код, моделирующий выпадение поля в рулетке (с учетом поля зеро).

n = int(input('Сколько раз собираетесь играть? Введите число: '))
for i in range(n):
    x = np.random.randint(37)
    print(f'Выирал номер {x}')


# 2.1 Напишите код, проверяющий любую из теорем сложения или умножения вероятности на примере рулетки
# или подбрасывания монетки.

n = 100000
t, m, k = 0, 0, 0
print('Введите два числа от 0 до 36')
a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
for i in range(n):
    x = np.random.randint(37)
    if x in [a, b]:
        t += 1
    if x == a:
        m += 1
    if x == b:
        k += 1
p1 = t / n
p2 = m / n
p3 = k / n
print(f'Вероятность того, что выпадет или {a}, или {b}, составляет {p1}')
print(f'Вероятность выпадения {a} составляет {p2}, а выпадения {b} - {p3}, что в сумме {p2 + p3}')
print(f'Таким образом, вероятность того, что выпадет или {a}, или {b}, равна сумме вероятностей выпадения каждого из этих чисел.')


# 2.2 Сгенерируйте десять выборок случайных чисел х0, …, х9.
#  и постройте гистограмму распределения случайной суммы х0+х1+ …+ х9.

n = 10000
sum_x = np.zeros(n)
for i in range(10):
    sum_x += np.random.rand(n)

num_bins = 15
n, bins, patches = plt.hist(sum_x, bins=num_bins, density=True)
plt.xlabel('sum(x0, x1, ..., x9)')
plt.ylabel('frequency density')
plt.title('Probability distribution')
plt.show()


# 3.1 Дополните код Монте-Карло последовательности независимых испытаний расчетом соответствующих вероятностей
# (через биномиальное распределение) и сравните результаты.


def n_choose_k(n, k):
    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))


def f_Bernoulli(p, n, k):
    return int(n_choose_k(n, k) * p ** k * (1 - p) ** (n - k))


def Monter_Carlo():
    n = int(input('Введите число испытаний: '))
    x0 = int(input('Введите число от 0 до 36, на которые Вы делаете ставку: '))
    k = int(input(f'Сколько раз, по-Вашему, сыграет Ваша ставка за {n} испытаний? Введите число: '))

    p = 1/37
    count = 0
    for i in range(n):
        x = np.random.randint(37)
        if x == x0:
            count += 1

    if count > k:
        print(f'Вам повезло, {x0} выпало {count} раз(a）! Вероятность такого случая - всего {f_Bernoulli(p, n, count)}')
    elif count == k:
        print(f'Вы угадали! Как Вам это удалось?! Вероятность того, что {x0} выпадет {k} раз(а), всего {f_Bernoulli(p, n, k)}')
    else:
        print(f'Не повезло... Не расстраивайтесь, вероятность того, что {x0} выпадет {k} раз(а), всего {f_Bernoulli(p, n, k)}.')


Monter_Carlo()


# 3.2 Повторите расчеты биномиальных коэффициентов и вероятностей k успехов в последовательности из n независимых испытаний, взяв другие значения n и k.

play_list = int(input('Сколько раз Вы бы хотели испытать удачу? Введите число: '))
for i in range(play_list):
    Monter_Carlo()


# 4. Из урока по комбинаторике повторите расчеты, сгенерировав возможные варианты перестановок для других значений n и k


def object_list(n):
    x = ''
    for i in range(n):
        x += str(i)
    return x


def comb(n, k, order):
    if order == 'n':
        for p in itertools.combinations(object_list(n), k):
            print(''.join(p))
        return f'Итак, мы имеем дело с сочитанием из {n} по {k}, число сочетаний - {n_choose_k(n, k)}'
    else:
        for p in itertools.permutations(object_list(n), k):
            print(''.join(str(x) for x in p))
        if n == k:
            return f'Мы имеем дело с перестановкой, число перестановок - {math.factorial(n)}'
        return f'Мы имеем дело с размещением из {n} по {k}, число размещений - {int(math.factorial(n) / math.factorial(n - k))}'


n = int(input('Введите число объектов: '))
k = int(input('Введите число объектов для размещения: '))
order = input('Важен ли для Вас порядок размещения? (y/n) ')

print(comb(n, k, order))


# 5. Дополните код расчетом коэффициента корреляции x и y по формуле

n = 100
r = 0.8

x = np.random.rand(n)
y = r * x + (1 - r) * np.random.rand(n)

R = np.sum((x - np.mean(x)) * (y - np.mean(y))) / np.sqrt(np.sum((x - np.mean(x)) ** 2) * np.sum((y - np.mean(y)) ** 2))
print(R)
print(np.corrcoef(x, y))

plt.plot(x, y, 'o')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)

A = np.vstack([x, np.ones(len(x))]).T
a, b, = np.linalg.lstsq(A, y, rcond=None)[0]
print(a, b)
plt.plot(x, a * x + b, 'r')
plt.show()

